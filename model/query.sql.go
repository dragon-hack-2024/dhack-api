// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package model

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, weight, height, birth_date
) VALUES (
  $1, $2, $3, $4
) RETURNING id, email, weight, height, birth_date, created_at
`

type CreateUserParams struct {
	Email     string      `json:"email"`
	Weight    int16       `json:"weight"`
	Height    int16       `json:"height"`
	BirthDate pgtype.Date `json:"birth_date"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Weight,
		arg.Height,
		arg.BirthDate,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Weight,
		&i.Height,
		&i.BirthDate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, weight, height, birth_date, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Weight,
		&i.Height,
		&i.BirthDate,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, weight, height, birth_date, created_at FROM users
ORDER BY email
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Weight,
			&i.Height,
			&i.BirthDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $1, weight = $2, height = $3, birth_date = $4
WHERE id = $5
RETURNING id, email, weight, height, birth_date, created_at
`

type UpdateUserParams struct {
	Email     string      `json:"email"`
	Weight    int16       `json:"weight"`
	Height    int16       `json:"height"`
	BirthDate pgtype.Date `json:"birth_date"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Weight,
		arg.Height,
		arg.BirthDate,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Weight,
		&i.Height,
		&i.BirthDate,
		&i.CreatedAt,
	)
	return i, err
}
